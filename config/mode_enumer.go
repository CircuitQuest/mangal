// Code generated by "enumer -type=Mode -trimprefix=Mode -json -yaml -text -transform=lower"; DO NOT EDIT.

package config

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ModeName = "nonetuiwebscriptinline"

var _ModeIndex = [...]uint8{0, 4, 7, 10, 16, 22}

const _ModeLowerName = "nonetuiwebscriptinline"

func (i Mode) String() string {
	i -= 1
	if i >= Mode(len(_ModeIndex)-1) {
		return fmt.Sprintf("Mode(%d)", i+1)
	}
	return _ModeName[_ModeIndex[i]:_ModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ModeNoOp() {
	var x [1]struct{}
	_ = x[ModeNone-(1)]
	_ = x[ModeTUI-(2)]
	_ = x[ModeWeb-(3)]
	_ = x[ModeScript-(4)]
	_ = x[ModeInline-(5)]
}

var _ModeValues = []Mode{ModeNone, ModeTUI, ModeWeb, ModeScript, ModeInline}

var _ModeNameToValueMap = map[string]Mode{
	_ModeName[0:4]:        ModeNone,
	_ModeLowerName[0:4]:   ModeNone,
	_ModeName[4:7]:        ModeTUI,
	_ModeLowerName[4:7]:   ModeTUI,
	_ModeName[7:10]:       ModeWeb,
	_ModeLowerName[7:10]:  ModeWeb,
	_ModeName[10:16]:      ModeScript,
	_ModeLowerName[10:16]: ModeScript,
	_ModeName[16:22]:      ModeInline,
	_ModeLowerName[16:22]: ModeInline,
}

var _ModeNames = []string{
	_ModeName[0:4],
	_ModeName[4:7],
	_ModeName[7:10],
	_ModeName[10:16],
	_ModeName[16:22],
}

// ModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ModeString(s string) (Mode, error) {
	if val, ok := _ModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Mode values", s)
}

// ModeValues returns all values of the enum
func ModeValues() []Mode {
	return _ModeValues
}

// ModeStrings returns a slice of all String values of the enum
func ModeStrings() []string {
	strs := make([]string, len(_ModeNames))
	copy(strs, _ModeNames)
	return strs
}

// IsAMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Mode) IsAMode() bool {
	for _, v := range _ModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Mode
func (i Mode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Mode
func (i *Mode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Mode should be a string, got %s", data)
	}

	var err error
	*i, err = ModeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Mode
func (i Mode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Mode
func (i *Mode) UnmarshalText(text []byte) error {
	var err error
	*i, err = ModeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Mode
func (i Mode) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Mode
func (i *Mode) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ModeString(s)
	return err
}
