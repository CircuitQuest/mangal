// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /image)
	GetImage(ctx echo.Context, params GetImageParams) error

	// (GET /mangalInfo)
	GetMangalInfo(ctx echo.Context) error

	// (GET /providers)
	GetProviders(ctx echo.Context) error

	// (GET /searchMangas)
	SearchMangas(ctx echo.Context, params SearchMangasParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetImage(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetImageParams
	// ------------- Required query parameter "url" -------------

	err = runtime.BindQueryParameter("form", true, true, "url", ctx.QueryParams(), &params.Url)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter url: %s", err))
	}

	// ------------- Optional query parameter "referer" -------------

	err = runtime.BindQueryParameter("form", true, false, "referer", ctx.QueryParams(), &params.Referer)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter referer: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetImage(ctx, params)
	return err
}

// GetMangalInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetMangalInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMangalInfo(ctx)
	return err
}

// GetProviders converts echo context to params.
func (w *ServerInterfaceWrapper) GetProviders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProviders(ctx)
	return err
}

// SearchMangas converts echo context to params.
func (w *ServerInterfaceWrapper) SearchMangas(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchMangasParams
	// ------------- Required query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, true, "provider", ctx.QueryParams(), &params.Provider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}

	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchMangas(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/image", wrapper.GetImage)
	router.GET(baseURL+"/mangalInfo", wrapper.GetMangalInfo)
	router.GET(baseURL+"/providers", wrapper.GetProviders)
	router.GET(baseURL+"/searchMangas", wrapper.SearchMangas)

}

type GetImageRequestObject struct {
	Params GetImageParams
}

type GetImageResponseObject interface {
	VisitGetImageResponse(w http.ResponseWriter) error
}

type GetImage200ImagepngResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetImage200ImagepngResponse) VisitGetImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetMangalInfoRequestObject struct {
}

type GetMangalInfoResponseObject interface {
	VisitGetMangalInfoResponse(w http.ResponseWriter) error
}

type GetMangalInfo200JSONResponse MangalInfo

func (response GetMangalInfo200JSONResponse) VisitGetMangalInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMangalInfodefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetMangalInfodefaultJSONResponse) VisitGetMangalInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProvidersRequestObject struct {
}

type GetProvidersResponseObject interface {
	VisitGetProvidersResponse(w http.ResponseWriter) error
}

type GetProviders200JSONResponse []Provider

func (response GetProviders200JSONResponse) VisitGetProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProvidersdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetProvidersdefaultJSONResponse) VisitGetProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchMangasRequestObject struct {
	Params SearchMangasParams
}

type SearchMangasResponseObject interface {
	VisitSearchMangasResponse(w http.ResponseWriter) error
}

type SearchMangas200JSONResponse []Manga

func (response SearchMangas200JSONResponse) VisitSearchMangasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchMangasdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SearchMangasdefaultJSONResponse) VisitSearchMangasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /image)
	GetImage(ctx context.Context, request GetImageRequestObject) (GetImageResponseObject, error)

	// (GET /mangalInfo)
	GetMangalInfo(ctx context.Context, request GetMangalInfoRequestObject) (GetMangalInfoResponseObject, error)

	// (GET /providers)
	GetProviders(ctx context.Context, request GetProvidersRequestObject) (GetProvidersResponseObject, error)

	// (GET /searchMangas)
	SearchMangas(ctx context.Context, request SearchMangasRequestObject) (SearchMangasResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetImage operation middleware
func (sh *strictHandler) GetImage(ctx echo.Context, params GetImageParams) error {
	var request GetImageRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetImage(ctx.Request().Context(), request.(GetImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetImageResponseObject); ok {
		return validResponse.VisitGetImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetMangalInfo operation middleware
func (sh *strictHandler) GetMangalInfo(ctx echo.Context) error {
	var request GetMangalInfoRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMangalInfo(ctx.Request().Context(), request.(GetMangalInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMangalInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMangalInfoResponseObject); ok {
		return validResponse.VisitGetMangalInfoResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetProviders operation middleware
func (sh *strictHandler) GetProviders(ctx echo.Context) error {
	var request GetProvidersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProviders(ctx.Request().Context(), request.(GetProvidersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProviders")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProvidersResponseObject); ok {
		return validResponse.VisitGetProvidersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SearchMangas operation middleware
func (sh *strictHandler) SearchMangas(ctx echo.Context, params SearchMangasParams) error {
	var request SearchMangasRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SearchMangas(ctx.Request().Context(), request.(SearchMangasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchMangas")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SearchMangasResponseObject); ok {
		return validResponse.VisitSearchMangasResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWzW7bPBB8FYLfdxQiN7np2CIoDLRokCDoIc1hLa1kBhLJLCm3RqB3L/gj2bWp2ECK",
	"tidT5HJnZ3Y58AsvVaeVRGkNL164KdfYgV9eEylyC01KI1mBfrtUFbrfWlEHlhdcSHt1yTNutxrDJzZI",
	"fMh4h8ZA46PjobEkZMOHIeOEz70grHjxEHLu4h+nZGr1hKV1uZZdzDThroQE2u6Ax9wZ/wyygePKVyAl",
	"UqKajJdqM3MiquS2FbbF5ElP7WnC4brPniLrCbRLWatjFhskI5Q8jTEGpgBuSG1EhYn2VmhKEtqmIWb1",
	"kNCl5Ti7XFHxXXRMeFy6uyWiLrEHUS329fo9u1/uJSn4u4vFxcJVoTRK0IIX/MpvZVyDXXvCuRgnq0F7",
	"pAD/iJb5CFaT6tj97Se22mowRsiGffhye8e0akXp5tDJCO7asgoXw8w6LIIOLZLhxcMhQEjeU8usYpX6",
	"LlsFTgrhDp979CMe5PWzta+apR6z+GaTCh+CEdZISA6qN+h+GrTMrjFwnIGNt/hrUI+uLqOVNGGOLheL",
	"4BbSovS6eoRcy2bnM271P2HNC/5fvjOiPLpQHgT0TU+JNgK6iCHjeffLs5lvpwweIpRksFK92zEW2hYr",
	"FmcJtE41dO9dnqQLWrei9NfzJxNewHms91AS1ANJT2JPABdVQ9/a31ZFsP9EAb3EHxpLixXDMcapr6On",
	"mFfFhw0IWLXIpvBvMiX1zZTtjUoLi505RXbyw2FyHCCCbYr/VPi/Jb9BoHLtZ2e+A3c+iNWKWBciD6W/",
	"209zwrpGJZiooqPMGMgY+Dbz8hWzwJONCCm48fN8rMc/MWThb8kZExYpEpq+tebvT9cw/AwAAP//mFdQ",
	"WycKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
